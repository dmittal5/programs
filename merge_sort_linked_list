#include <stdio.h>
#include <stdlib.h>

struct node
{
    struct node *next;
    int item;
};

void add_at_start(struct node ** start,int element)
{
    struct node *temp;
    temp=(struct node *)malloc(sizeof(struct node));
    temp->item = element;
    temp->next = NULL;
    *start = temp;
}

void add_at_end(struct node **start , int element)
{
    struct node *temp ;
    struct node *p;
    temp=(struct node *)malloc(sizeof(struct node));
    temp->item = element;
    temp->next = NULL;
    p = *start ;
    while(p->next != NULL)
        p = p->next;
    p->next = temp ;
}

display(struct node *start)
{
    struct node *p;
    p = start;
    printf("your list is \n");
    while(p != NULL)
    {
        printf("%d",p->item) ;
        p = p ->next ;
    }
}

void create_list(struct node **start)
{
    int i,element,n;
    printf("enter no. of elements \n");
    scanf("%d",&n);
    for(i = 0 ; i < n ; i++)
    {
        scanf("%d",&element);
        if(*start == NULL)
            add_at_start(start ,element);
        else add_at_end(start ,element);
    }
}

struct node *merge(struct node *a,struct node *b)
{
    struct node *temp = NULL;
    if(a==NULL)
       return(b);

    if(b==NULL)
        return(a);

    if(a->item <= b->item)
    {
        temp = a;
        temp->next = merge(a->next,b);
    }

    else
    {
        temp = b;
        temp->next =merge(a,b->next);
    }
    return(temp);
}

void merge_sort(struct node **head)
{
    struct node *slow,*fast,*head_r;
    head_r = *head;
    if(head_r==NULL && head_r->next== NULL)
        return;
    slow = head_r;
    fast = head_r->next->next;

    while(fast!=NULL && fast->next!=NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    struct node *b;
    b = slow->next;
    slow->next == NULL;
    merge_sort(&head_r);
    merge_sort(&b);
    *head = merge(head_r,b);
}

int main()
{
    struct node *start;
    start = NULL;
    create_list(&start);
    display(start);
    merge_sort(&start);
    return 0;
}
